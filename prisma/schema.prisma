// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(sequence())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// overall form
model Form {
  formId        String       @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String

  name      String
  description String?

  // Define a one-to-many relationship between Form and FormSection
  formSection FormSection[]
    
  // Define a one-to-many relationship between StaticForm and StaticFormResponse
  responses FormResponse[]
}

model FormSection {
  sectionId    String @id @default(cuid())
  sectionOrder Int    @default(sequence())
  sectionName  String @default("New Section")
  sectionDesc  String @default("New Section Description")

  // Define a one-to-many relationship between FormSection and FormField
  FormField FormField[]

  // Define a many-to-one relationship between Form and FormStatic
  formFk    Form @relation(fields: [formId], references: [formId])
  formId    String
}

// question(s) of the form
model FormField {
  fieldId        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  label     String
  type      FormFieldType
  required  Boolean   @default(true)
  order     Int

  // Define a zero-to-many relationship between FormField and FormFieldOptions
  optionsId   FormFieldOptions?

  // Define a many-to-one relationship between FormField and FormSection
  formSectionFk    FormSection @relation(fields: [sectionId], references: [sectionId])
  sectionId    String

  answers   FormAnswer[]
}

// options if the question is close-ended
model FormFieldOptions {
  optionsId        String      @id @default(cuid())
  value     String[]

  // Define a many-to-zero relationship between FormFieldOptions and FormField
  formFieldFk     FormField @relation(fields: [fieldId], references: [fieldId])
  fieldId   String      @unique

}

// Enumeration to represent field types
enum FormFieldType {
  TEXT
  NUMBER
  EMAIL
  CHECKBOX // multi-select
  RADIO // single-select
  SELECT // dropdown
}

// store user responses
model FormResponse {
  responseId String             @id @default(cuid())
  submittedAt  DateTime         @default(now())
  updatedAt  DateTime           @updatedAt
  submittedBy     String

  // Define a many-to-one relationship between FormResponse and Form
  formFk     Form         @relation(fields: [formId], references: [formId])
  formId     String

  // Define a one-to-many relationship between FormResponse and FormAnswer
  answers    FormAnswer[]
}

// store answers for each question
model FormAnswer {
  id         String                @id @default(cuid())
  value      String?

  // Define a many-to-one relationship between FormAnswer and FormResponse
  response   FormResponse @relation(fields: [responseId], references: [responseId])
  responseId String

  // Define a one-to-one relationship between FormAnswer and FormField
  field      FormField    @relation(fields: [fieldId], references: [fieldId])
  fieldId    String
}